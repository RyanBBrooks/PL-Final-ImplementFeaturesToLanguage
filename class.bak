#lang plait

(define-type Exp
  (numE [n : Number])
  (plusE [lhs : Exp]
         [rhs : Exp])
  (multE [lhs : Exp]
         [rhs : Exp])
  (argE)
  (nullE)     ;;8: null
  (thisE)
  (if0E [c : Exp]    ;;2: If0
        [t : Exp]
        [e : Exp])
  ;;1: cast
  (castE [s : Symbol]
         [c : Exp])
  ;;6: array
  (newarrayE [size : Exp]
             [value : Exp])
  (arrayrefE [array : Exp]
             [i : Exp])
  (arraysetE [array : Exp]
             [i : Exp]
             [v : Exp])
  ;;6: array - begin (to test set)
  (beginE [f : Exp]
          [s : Exp])
  
  (newE [class-name : Symbol]
        [args : (Listof Exp)])
  (getE [obj-expr : Exp]
        [field-name : Symbol])
  (sendE [obj-expr : Exp]
         [method-name : Symbol]
         [arg-expr : Exp])
  (ssendE [obj-expr : Exp]
          [class-name : Symbol]
          [method-name : Symbol]
          [arg-expr : Exp]))

(define-type Class
  (classC [super-name : Symbol] ;;1: cast - added super name
          [field-names : (Listof Symbol)]
          [methods : (Listof (Symbol * Exp))]))

(define-type Value
  (numV [n : Number])
  (nullV)     ;;8: null
  (arrayV [values : (Boxof (Listof Value))]) ;;6 array 
  (objV [class-name : Symbol]
        [field-values : (Listof Value)]))

(module+ test
  (print-only-errors #t))

;; ----------------------------------------

(define (find [l : (Listof (Symbol * 'a))] [name : Symbol]) : 'a
  (type-case (Listof (Symbol * 'a)) l
    [empty
     (error 'find (string-append "not found: " (symbol->string name)))]
    [(cons p rst-l)
     (if (symbol=? (fst p) name)
         (snd p)
         (find rst-l name))]))

(module+ test
  (test (find (list (values 'a 1)) 'a)
        1)
  (test (find (list (values 'a 1) (values 'b 2)) 'b)
        2)
  (test/exn (find empty 'a)
            "not found: a")
  (test/exn (find (list (values 'a 1)) 'x)
            "not found: x"))

;; ----------------------------------------

(define interp : (Exp (Listof (Symbol * Class)) Value Value -> Value)
  (lambda (a classes this-val arg-val)
    (local [(define (recur expr)
              (interp expr classes this-val arg-val))]
      (type-case Exp a
        [(numE n) (numV n)]
        [(plusE l r) (num+ (recur l) (recur r))]
        [(multE l r) (num* (recur l) (recur r))]
        [(thisE) this-val]
        [(argE) arg-val]

        ;;8: null
        [(nullE)(nullV)]

        ;;6: array - new
        [(newarrayE l v) (type-case Value (recur l)
                             [(numV n) (arrayV (box (construct-array n (recur v) empty)))]
                             [else (error 'interp "not a number")])]
        ;;6: - ref --- ensure we are using an array
        [(arrayrefE a i) (type-case Value (recur a)
                           ;;ensure index is a number
                           [(arrayV vs) (type-case Value (recur i)
                                           ;;ensure array is not too small
                                           [(numV n) (if (or (>= n (length (unbox vs))) (< n 0))
                                                         (error 'interp "index out of range")
                                                         (list-ref (unbox vs) n))]
                                           [else (error 'interp "not a number")])]
                           [else (error 'interp "not an array")])]
        ;;6: - set ---  ensure we are using an array
        [(arraysetE a i v) (type-case Value (recur a)
                           ;;ensure index is a number
                           [(arrayV vs) (type-case Value (recur i)
                                           [(numV n) (begin (set-box! vs (arr-list-set (unbox vs) n (recur v)))
                                                            (numV 0))]
                                           [else (error 'interp "not a number")])]
                           [else (error 'interp "not an array")])]
        ;;6: - begin
        [(beginE f s) (begin (recur f)
                            (recur s))]

        ;;1: cast
        [(castE s e) (type-case Value (recur e)
                       ;;number - type must be num (normally caught by typechecker)
                       [(numV n) (if (equal? s 'num)
                                     (numV n)
                                     (error 'interp (string-append "cannot cast to " (symbol->string s))))]
                       ;;object - Exp value must be an instance of a subclass of Symbol
                       [(objV c f) (if (instance-of-sub? c s classes)
                                       (objV c f)
                                       (error 'interp (string-append "cannot cast to " (symbol->string s))))]
                       ;;6: array
                       [(arrayV v) (error 'interp (string-append "cannot cast to" (symbol->string s)))]
                       
                       ;;null - null is a subtype and supertype of everything so it returns null if s is not num
                       [(nullV)(if(equal? s 'num)
                                  (error 'interp "cannot cast to num")
                                  (nullV))])]
                       
        
        ;;2: if0
        [(if0E c t e) (type-case Value (recur c)
                        [(numV n) (if (equal? 0 n)
                                      (recur t)
                                      (recur e))]
                        [else (error 'interp "not a number")])]
        
        [(newE class-name field-exprs)
         (local [(define c (find classes class-name))
                 (define vals (map recur field-exprs))]
           (if (= (length vals) (length (classC-field-names c)))
               (objV class-name vals)
               (error 'interp "wrong field count")))]
        [(getE obj-expr field-name)
         (type-case Value (recur obj-expr)
           [(objV class-name field-vals)
            (type-case Class (find classes class-name)
              [(classC s field-names methods)
               (find (map2 (lambda (n v) (values n v))
                           field-names
                           field-vals)
                     field-name)])]
           [(nullV) (error 'interp "object is null")]
           [else (error 'interp "not an object")])]
        [(sendE obj-expr method-name arg-expr)
         (local [(define obj (recur obj-expr))
                 (define arg-val (recur arg-expr))]
           (type-case Value obj
             [(objV class-name field-vals)
              (call-method class-name method-name classes
                           obj arg-val)]
             [(nullV) (error 'interp "object is null")]
             [else (error 'interp "not an object")]))]
        [(ssendE obj-expr class-name method-name arg-expr)
         (local [(define obj (recur obj-expr))
                 (define arg-val (recur arg-expr))]
           (call-method class-name method-name classes
                        obj arg-val))]))))

(define (call-method class-name method-name classes
                     obj arg-val)
  (type-case Class (find classes class-name)
    [(classC s field-names methods)
     (let ([body-expr (find methods method-name)])
       (interp body-expr
               classes
               obj
               arg-val))]))

;;6: array - helper methods to construct arrays
(define (construct-array [s : Number] [v : Value] [a : (Listof Value)]) : (Listof Value)
  (if (equal? 0 s)
      a
      (construct-array (- s 1)
                       v
                       (append a (list v)))))
;;6: array - helper methods to set an item at an index in a list
(define (arr-list-set [vs : (Listof Value)] [n : Number] [v : Value]) : (Listof Value)
  (if (or (>= n (length vs)) (< n 0))
      (error 'interp "index out of range")
      (if (equal? 0 n)
          (append (list v) (rest vs))
          (append (list (first vs)) (arr-list-set (rest vs) (- n 1) v)))))

  
(define (num-op [op : (Number Number -> Number)]
                [op-name : Symbol] 
                [x : Value]
                [y : Value]) : Value
  (cond
    [(and (numV? x) (numV? y))
     (numV (op (numV-n x) (numV-n y)))]
    [else (error 'interp "not a number")]))

(define (num+ x y) (num-op + '+ x y))
(define (num* x y) (num-op * '* x y))

;;cast
(define (instance-of-sub? [name1 : Symbol] [name2 : Symbol] [classes : (Listof (Symbol * Class))]) : Boolean
  (cond
    [(equal? name1 name2) #t]
    [(equal? name1 'Object) #f]
    [else
     (type-case Class (find classes name1)
       [(classC super-name fields methods)
        (instance-of-sub? super-name name2 classes)])]))

;; ----------------------------------------
;; Examples

(module+ test
  (define posn-class
    (values 'Posn
            (classC
             'Object
             (list 'x 'y)
             (list (values 'mdist
                           (plusE (getE (thisE) 'x) (getE (thisE) 'y)))
                   (values 'addDist
                           (plusE (sendE (thisE) 'mdist (numE 0))
                                  (sendE (argE) 'mdist (numE 0))))
                   (values 'addX
                           (plusE (getE (thisE) 'x) (argE)))
                   (values 'multY (multE (argE) (getE (thisE) 'y)))
                   (values 'factory12 (newE 'Posn (list (numE 1) (numE 2))))))))
    
  (define posn3D-class
    (values 'Posn3D
            (classC
             'Posn
             (list 'x 'y 'z)
             (list (values 'mdist (plusE (getE (thisE) 'z)
                                         (ssendE (thisE) 'Posn 'mdist (argE))))
                   (values 'addDist (ssendE (thisE) 'Posn 'addDist (argE)))))))

  (define nullified-class ;;8: Null
    (values 'Nullified
            (classC
             'Object
             (list 'x 'y)
             (list (values 'get-x
                           (getE (thisE) 'x))
                   (values 'get-y
                           (getE (thisE) 'y))
                   (values 'get-x-wrap
                           (sendE (argE) 'get-x (nullE)))))))

  (define arrays-set-class ;;6: Array
    (values 'Arrays-set
            (classC
             'Object
             (list 'x)
             (list (values 'update-nine!
                           (beginE (arraysetE (getE (thisE) 'x) (argE) (numE 9)) (getE (thisE) 'x)))
                   (values 'update-ref-four!
                           (beginE (arraysetE (getE (thisE) 'x) (argE) (numE 4)) (arrayrefE (getE (thisE) 'x) (argE))))))))

  (define posn27 (newE 'Posn (list (numE 2) (numE 7))))
  (define posn531 (newE 'Posn3D (list (numE 5) (numE 3) (numE 1))))

  (define (interp-nullified a)
    (interp a (list nullified-class posn-class posn3D-class) (numV -1) (numV -1)))

  (define (interp-arrays-set a)
    (interp a (list arrays-set-class) (numV -1) (numV -1)))
  
  (define (interp-posn a)
    (interp a (list posn-class posn3D-class) (numV -1) (numV -1))))

;; ----------------------------------------

(module+ test
  (test (interp (numE 10) 
                empty (objV 'Object empty) (numV 0))
        (numV 10))
  (test (interp (plusE (numE 10) (numE 17))
                empty (objV 'Object empty) (numV 0))
        (numV 27))
  (test (interp (multE (numE 10) (numE 7))
                empty (objV 'Object empty) (numV 0))
        (numV 70))

  ;;2: If0 - test - interp
  (test (interp (if0E (numE 0) (numE 10) (numE -10))
                empty (objV 'Object empty) (numV 0))
        (numV 10))
  (test (interp (if0E (numE 999) (numE 10) (numE -10))
                empty (objV 'Object empty) (numV 0))
        (numV -10))
  (test (interp-posn (if0E (numE 999) (newE 'Posn (list (numE 1) (numE 2))) (newE 'Posn (list (numE 3) (numE 4)))))
        (objV 'Posn (list (numV 3) (numV 4))))
  (test/exn (interp-posn (if0E (newE 'Posn (list (numE 1) (numE 2))) (newE 'Posn (list (numE 1) (numE 2))) (newE 'Posn (list (numE 3) (numE 4)))))
            "not a number")

  ;;1: cast - test - interp / instance-of-sub?
  (test/exn (interp (castE 'Object (numE 1))
                    empty (objV 'Object empty) (numV 0))
            "cannot cast")
  (test (interp (castE 'num (numE 1))
                empty (objV 'Object empty) (numV 0))
        (numV 1))
  (test/exn (interp (castE 'num (newarrayE (numE 2) (numE 5)))
                    empty (objV 'Object empty) (numV 0))
            "cannot cast")
  (test/exn (interp-posn (castE 'Posn3D (newE 'Posn (list (numE 2) (numE 7)))))
            "cannot cast")
  (test (interp-posn (castE 'Object (newE 'Posn (list (numE 2) (numE 7)))))
        (objV 'Posn (list (numV 2) (numV 7))))
  (test (interp-posn (castE 'Posn (newE 'Posn3D (list (numE 2) (numE 7) (numE 4)))))
        (objV 'Posn3D (list (numV 2) (numV 7) (numV 4))))
  (test (interp-posn (castE 'Object (newE 'Posn3D (list (numE 2) (numE 7) (numE 4)))))
        (objV 'Posn3D (list (numV 2) (numV 7) (numV 4))))
  (test/exn (interp-posn (castE 'num (newE 'Posn3D (list (numE 2) (numE 7) (numE 4)))))
            "cannot cast")
  (test/exn (interp-posn (castE 'Posn3D (numE 1)))
            "cannot cast")
  (test (interp-posn (castE 'Posn3D (nullE)))
        (nullV))
  ;;cannot cast null to a number as null can never be used like a number
  (test/exn (interp-posn (castE 'num (nullE)))
            "cannot cast")

;;6: array - test - interp
  (test (interp (newarrayE (numE 2) (newarrayE  (numE 2) (numE 2)))
                empty (objV 'Object empty) (numV 0))
        (arrayV (box (list (arrayV (box (list (numV 2) (numV 2)))) (arrayV  (box (list (numV 2) (numV 2))))))))
  (test/exn (interp (newarrayE (newarrayE  (numE 2) (numE 2)) (newarrayE  (numE 2) (numE 2)))
                    empty (objV 'Object empty) (numV 0))
        "not a number")
  ;;ref
  (test (interp (arrayrefE (newarrayE (numE 2) (numE 5)) (numE 0))
                empty (objV 'Object empty) (numV 0))
        (numV 5))
  (test (interp (arrayrefE (newarrayE (numE 2) (numE 5)) (numE 1))
                empty (objV 'Object empty) (numV 0))
        (numV 5))
  (test/exn (interp (arrayrefE (newarrayE (numE 2) (numE 5)) (numE 2))
                    empty (objV 'Object empty) (numV 0))
        "index out of range")
   (test/exn (interp (arrayrefE (newarrayE (numE 2) (numE 5)) (numE -1))
                    empty (objV 'Object empty) (numV 0))
        "index out of range")
  (test/exn (interp (arrayrefE (newarrayE (numE 2) (numE 5)) (newarrayE (numE 2) (numE 5)))
                    empty (objV 'Object empty) (numV 0))
        "not a number")
  (test/exn (interp (arrayrefE (numE 2) (numE 2))
                    empty (objV 'Object empty) (numV 0))
        "not an array")
  ;;set
  (test (interp (arraysetE (newarrayE (numE 2) (numE 5)) (numE 0) (numE 6))
                empty (objV 'Object empty) (numV 0))
        (numV 0))
  (test (interp (arraysetE (newarrayE (numE 2) (numE 5)) (numE 1) (numE 6))
                empty (objV 'Object empty) (numV 0))
        (numV 0))
  (test/exn (interp (arraysetE (newarrayE (numE 2) (numE 5)) (numE 2) (numE 6))
                    empty (objV 'Object empty) (numV 0))
        "index out of range")
   (test/exn (interp (arraysetE (newarrayE (numE 2) (numE 5)) (numE -1) (numE 6))
                    empty (objV 'Object empty) (numV 0))
        "index out of range")
  (test/exn (interp (arraysetE (newarrayE (numE 2) (numE 5)) (newarrayE (numE 2) (numE 5)) (numE 6))
                    empty (objV 'Object empty) (numV 0))
        "not a number")
  (test/exn (interp (arraysetE (numE 2) (numE 2) (numE 6))
                    empty (objV 'Object empty) (numV 0))
        "not an array")
  ;;begin
  (test (interp (beginE (numE 1) (numE 2))
         empty (objV 'Object empty) (numV 0))
        (numV 2))
  ;;imperative
  (test (interp-arrays-set (sendE (newE 'Arrays-set (list (newarrayE (numE 2) (numE 2)))) 'update-nine! (numE 0)))
            (arrayV (box (list (numV 9) (numV 2)))))
  (test (interp-arrays-set (arrayrefE (sendE (newE 'Arrays-set (list (newarrayE (numE 2) (numE 2)))) 'update-nine! (numE 1)) (numE 1)))
            (numV 9))
  (test (interp-arrays-set (sendE (newE 'Arrays-set (list (newarrayE (numE 2) (numE 2)))) 'update-ref-four! (numE 0)))
            (numV 4))
  
  ;;8: null - test - interp
  (test (interp (nullE)
                empty (objV 'Object empty) (numV 0))
        (nullV))
  (test (interp-nullified (sendE (newE 'Nullified (list (numE 10) (newE 'Posn (list (numE 2) (numE 7))))) 'get-x (nullE)))
        (numV 10))
  (test (interp-nullified (sendE (newE 'Nullified (list (numE 2) (nullE))) 'get-x-wrap (newE 'Nullified (list (numE -10) (nullE)))))
        (numV -10))
  ;;can't use null as a number - still
  (test/exn (interp (plusE (nullE) (numE 1))
                empty (objV 'Object empty) (numV 0))
        "not a number")
  ;;call get or send directly on null returns error still even though typechecker - should eliminate these
  (test/exn (interp (getE (nullE) 'x)
                    empty (objV 'Object empty) (numV 0))
            "object is null")
  (test/exn (interp (sendE (nullE) 'fn (numE 0))
                       empty (objV 'Object empty) (numV 0))
            "object is null")
  ;;call get or send on object given a null returns error - this only happens at runtime as the method it was declared as a different object type
  ;;that has the appropriate feilds then passed a null value. 
  (test/exn (interp-posn (sendE (newE 'Posn (list (numE 2) (numE 7))) 'addDist (nullE)))
            "object is null")
  (test/exn (interp-nullified (sendE (newE 'Nullified (list (numE 2) (nullE))) 'get-x-wrap (nullE)))
            "object is null")
  (test/exn (interp-nullified (ssendE (newE 'Nullified (list (numE 2) (nullE))) 'get-x-wrap (nullE)))
            "object is null")
  ;;getting a null object should return nullV
  (test (interp-nullified (sendE (newE 'Nullified (list (numE 10) (nullE))) 'get-y (nullE)))
        (nullV))


  
  (test (interp-posn (newE 'Posn (list (numE 2) (numE 7))))
        (objV 'Posn (list (numV 2) (numV 7))))

  (test (interp-posn (sendE posn27 'mdist (numE 0)))
        (numV 9))
  
  (test (interp-posn (sendE posn27 'addX (numE 10)))
        (numV 12))

  (test (interp-posn (sendE (ssendE posn27 'Posn 'factory12 (numE 0))
                            'multY
                            (numE 15)))
        (numV 30))

  (test (interp-posn (sendE posn531 'addDist posn27))
        (numV 18))
  
  (test/exn (interp-posn (plusE (numE 1) posn27))
            "not a number")
  (test/exn (interp-posn (getE (numE 1) 'x))
            "not an object")
  (test/exn (interp-posn (sendE (numE 1) 'mdist (numE 0)))
            "not an object")
  (test/exn (interp-posn (ssendE (numE 1) 'Posn 'mdist (numE 0)))
            "not an object")
  (test/exn (interp-posn (newE 'Posn (list (numE 0))))
            "wrong field count"))